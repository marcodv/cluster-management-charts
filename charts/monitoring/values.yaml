# Default values for monitoring.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

grafana:
  namespaceOverride: monitoring
  rbac:
    create: true
    pspEnabled: true
    pspUseAppArmor: true
    namespaced: true
  serviceAccount:
    create: true
    name: grafana

  replicas: 1

  # Administrator credentials when not using an existing secret (see below)
  admin:
    user: 
    #assumeRoleArn: arn:aws:iam::848481299679:role/grafanaRoledevEnv
    password: 

  ## See `kubectl explain deployment.spec.strategy` for more
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  deploymentStrategy:
    type: RollingUpdate

  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000

  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 10

  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
    annotations: {}
    labels:
      app: grafana
    portName: service

  datasources:
    secretName:

  dashboardsProvider:
    enabled: true
    configMapName:
  
  dashboardsConfigMaps: 
    - configMapName: cluster-resources
      fileName: cluster-resources.json
    - configMapName: traefik
      fileName: traefik.json
    - configMapName: rabbitmq
      fileName: rabbitmq.json
    - configMapName: eks-volumes
      fileName: eks-volumes.json
    - configMapName: rds
      fileName: rds.json
    - configMapName: elasticache
      fileName: elasticache.json

  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 20Gi

  ## Grafana container limits resources
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

prometheus:
  forceNamespace: monitoring
  resources:
    limits:
      cpu: 200m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 30Mi
