

rabbitmq:
  auth:
    ## @param auth.username &reg;abbitMQ application username
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    # username: user
    username: "django_user"

    ## @param auth.password &reg;abbitMQ application password
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    password: ""
    ## @param auth.existingPasswordSecret Existing secret with &reg;abbitMQ credentials (must contain a value for `rabbitmq-password` key)
    ## e.g:
    ## existingPasswordSecret: name-of-existing-secret
    ##
    existingPasswordSecret: "celery-broker-pass"

    ## @param auth.erlangCookie Erlang cookie to determine whether different nodes are allowed to communicate with each other
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    erlangCookie: ""
    ## @param auth.existingErlangSecret Existing secret with &reg;abbitMQ Erlang cookie (must contain a value for `rabbitmq-erlang-cookie` key)
    ## e.g:
    ## existingErlangSecret: name-of-existing-secret
    ##
    existingErlangSecret: ""

    ## Enable encryption to rabbitmq
    ## ref: https://www.rabbitmq.com/ssl.html
    ## @param auth.tls.enabled Enable TLS support on &reg;abbitMQ
    ## @param auth.tls.autoGenerated Generate automatically self-signed TLS certificates
    ## @param auth.tls.failIfNoPeerCert When set to true, TLS connection will be rejected if client fails to provide a certificate
    ## @param auth.tls.sslOptionsVerify Should [peer verification](https://www.rabbitmq.com/ssl.html#peer-verification) be enabled?
    ## @param auth.tls.caCertificate Certificate Authority (CA) bundle content
    ## @param auth.tls.serverCertificate Server certificate content
    ## @param auth.tls.serverKey Server private key content
    ## @param auth.tls.existingSecret Existing secret with certificate content to &reg;abbitMQ credentials
    ## @param auth.tls.existingSecretFullChain Whether or not the existing secret contains the full chain in the certificate (`tls.crt`). Will be used in place of `ca.cert` if `true`.
    ##
    tls:
      enabled: false
      autoGenerated: false
      failIfNoPeerCert: true
      sslOptionsVerify: verify_peer
      caCertificate: |-
      serverCertificate: |-
      serverKey: |-
      existingSecret: ""
      existingSecretFullChain: false


